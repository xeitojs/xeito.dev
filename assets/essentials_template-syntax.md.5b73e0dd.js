import{_ as s,c as a,o as e,a as t}from"./app.51f00abb.js";const h=JSON.parse('{"title":"Template Syntax","description":"","frontmatter":{},"headers":[{"level":2,"title":"Text Interpolation","slug":"text-interpolation","link":"#text-interpolation","children":[]},{"level":2,"title":"Attribute and Property Bindings","slug":"attribute-and-property-bindings","link":"#attribute-and-property-bindings","children":[]},{"level":2,"title":"Boolean Attributes","slug":"boolean-attributes","link":"#boolean-attributes","children":[]},{"level":2,"title":"Aria and Dataset special cases","slug":"aria-and-dataset-special-cases","link":"#aria-and-dataset-special-cases","children":[]},{"level":2,"title":"Using JavaScript Expressions","slug":"using-javascript-expressions","link":"#using-javascript-expressions","children":[]},{"level":2,"title":"Sparse Attribute Interpolation","slug":"sparse-attribute-interpolation","link":"#sparse-attribute-interpolation","children":[]},{"level":2,"title":"Event Listeners","slug":"event-listeners","link":"#event-listeners","children":[]}],"relativePath":"essentials/template-syntax.md"}'),n={name:"essentials/template-syntax.md"},l=t('<h1 id="template-syntax" tabindex="-1">Template Syntax <a class="header-anchor" href="#template-syntax" aria-hidden="true">#</a></h1><p>As we mentioned in the <a href="./../guide/introduction.html#tagged-template-literals">Introduction</a> guide, the template syntax is based on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="noreferrer">tagged template literals</a>, which allows us to write HTML inside of JavaScript (without transpilation) and create our UI declaratively. All Xeito templates can be syntactically valid HTML, but they can also contain special specific tags and attributes that allow us to create dynamic components and bind data to them.</p><p>Under the hood Xeito uses <a href="https://github.com/webreflection/uhtml" target="_blank" rel="noreferrer">Âµhtml</a> that will take care of creating and updating the DOM based on the template literals and figure out the minimnal amount of changes to apply to the DOM.</p><h2 id="text-interpolation" tabindex="-1">Text Interpolation <a class="header-anchor" href="#text-interpolation" aria-hidden="true">#</a></h2><p>The most basic binding is text interpolation using the standard syntaxt for interpolations inside of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="noreferrer">templates</a> <code>${}</code>:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">html</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">&lt;div&gt;Hello </span><span style="color:#89DDFF;">${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">!&lt;/div&gt;</span><span style="color:#89DDFF;">`</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span></code></pre></div><p>The expression inside the interpolation will be evaluated and the result will be converted to a string and inserted into the DOM. Also, if the <code>name</code> property is decorated with the <code>@State()</code> decorator in the component class, Xeito will track the changes in the property and update the DOM automatically when it changes.</p><h2 id="attribute-and-property-bindings" tabindex="-1">Attribute and Property Bindings <a class="header-anchor" href="#attribute-and-property-bindings" aria-hidden="true">#</a></h2><p>Xeito supports attribute and property bindings for all HTML elements and components, this means that you can bind any property or attribute of an element/component to a property/variable/method of your component class. (Note that attributes are always strings, while properties can be any type of value).</p><p>You can bind data to an attribute like this:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">html</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">&lt;div class=&quot;</span><span style="color:#89DDFF;">${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">className</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&quot; customId=</span><span style="color:#89DDFF;">${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">customId</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&gt;&lt;/div&gt;</span><span style="color:#89DDFF;">`</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span></code></pre></div><p>Or to a property like this:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">html</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">&lt;input .value=&quot;</span><span style="color:#89DDFF;">${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&quot; .checked=</span><span style="color:#89DDFF;">${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">checked</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&gt;</span><span style="color:#89DDFF;">`</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span></code></pre></div><p>Notice that the attribute and property bindings are different, you need to use the <code>.</code> prefix for property bindings, if you don&#39;t it will be interpreted as an attribute binding. If the value of a property binding is <code>null</code> or <code>undefined</code> the property will be removed from the element.</p><div class="info custom-block"><p class="custom-block-title">NOTE</p><p>The content after the <code>=</code> sign can be wrapped in quotes or not (<code>myAttribute=&quot;${...}&quot;</code> or <code>myAttribute=${...}</code>) and it will be handled correctly either way. This applies to all bindings, not just attributes and properties.</p></div><h2 id="boolean-attributes" tabindex="-1">Boolean Attributes <a class="header-anchor" href="#boolean-attributes" aria-hidden="true">#</a></h2><p>Boolean attributes can indicate true/false values depending on the presence of the attribute or not. For example, the <code>disabled</code> attribute of a <code>&lt;button&gt;</code> element will disable the button if it is present, and enable it if not.</p><p>You can bind them like any other attribute, but Xeito also provides a special syntax for boolean attributes:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">html</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">&lt;button ?disabled=</span><span style="color:#89DDFF;">${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">disabled</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&gt;Can I click?&lt;/button&gt;</span><span style="color:#89DDFF;">`</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span></code></pre></div><p>The <code>?</code> prefix will toggle the attribute depending on the value of the expression, if the value is <code>truthy</code> the attribute will be added, if it is <code>falsy</code> it will be removed.</p><h2 id="aria-and-dataset-special-cases" tabindex="-1">Aria and Dataset special cases <a class="header-anchor" href="#aria-and-dataset-special-cases" aria-hidden="true">#</a></h2><p>If you bind an attribute that has the name <code>aria</code> such as <code>aria=${this.ariaObject}</code> the aria attributes present in the object will be added to the element.</p><p>For the dataset you can bind to the propery <code>dataset</code> like this: <code>.dataset=${this.datasetObject}</code> and the <code>node.dataset</code> property will be updated with the values of the object.</p><p>This is an example of how to bind to the <code>aria</code> and <code>dataset</code>:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">html</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">&lt;div aria=</span><span style="color:#89DDFF;">${</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">labelledBy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">role</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&gt;&lt;/div&gt;</span><span style="color:#89DDFF;">`</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">//=&gt; &lt;div aria-labelledby=&quot;id&quot; role=&quot;button&quot;&gt;&lt;/div&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">html</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">&lt;div .dataset=</span><span style="color:#89DDFF;">${</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">otherKey</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">otherValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> /&gt;</span><span style="color:#89DDFF;">`</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">//=&gt; &lt;div data-key=&quot;value&quot; data-other-key=&quot;otherValue&quot;&gt;&lt;/div&gt;</span></span>\n<span class="line"></span></code></pre></div><h2 id="using-javascript-expressions" tabindex="-1">Using JavaScript Expressions <a class="header-anchor" href="#using-javascript-expressions" aria-hidden="true">#</a></h2><p>Xeito supports all JavaScript expressions inside of the template literals, you can use any valid JavaScript expression inside of the interpolation, for example:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">html</span><span style="color:#89DDFF;">`</span></span>\n<span class="line"><span style="color:#C3E88D;">    &lt;div&gt;</span><span style="color:#89DDFF;">${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">number </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#C3E88D;">    &lt;div&gt;</span><span style="color:#89DDFF;">${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">ok </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Yes</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">No</span><span style="color:#89DDFF;">&#39;}</span><span style="color:#C3E88D;">&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#C3E88D;">    &lt;p&gt;</span><span style="color:#89DDFF;">${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">textString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reverse</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&lt;/p&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C3E88D;">    &lt;div class=</span><span style="color:#89DDFF;">${&#39;</span><span style="color:#C3E88D;">classPrefix-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">divClass</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&gt;&lt;/div&gt;</span></span>\n<span class="line"><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">`</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre></div><h2 id="sparse-attribute-interpolation" tabindex="-1">Sparse Attribute Interpolation <a class="header-anchor" href="#sparse-attribute-interpolation" aria-hidden="true">#</a></h2><p>You cannot use sparse attribute interpolations, always use one interpolation to define each attribute, for example:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">html</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">&lt;div style=&quot;top:</span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">;left</span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&quot;&gt;&lt;/div&gt;</span><span style="color:#89DDFF;">`</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// WRONG</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">html</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">&lt;div style=</span><span style="color:#89DDFF;">${`</span><span style="color:#C3E88D;">top:</span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">;left</span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">}`}</span><span style="color:#C3E88D;">&gt;&lt;/div&gt;</span><span style="color:#89DDFF;">`</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// CORRECT</span></span>\n<span class="line"></span></code></pre></div><p>If you try to use sparse attribute interpolations, the parser will throw a <code>Bad Template</code> error.</p><h2 id="event-listeners" tabindex="-1">Event Listeners <a class="header-anchor" href="#event-listeners" aria-hidden="true">#</a></h2><p>You can bind event listeners to any element/component using the <code>@</code> prefix or the <code>on</code> attribute:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">html</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">&lt;button @click=</span><span style="color:#89DDFF;">${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">handleClick</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&gt;Click Me&lt;/button&gt;</span><span style="color:#89DDFF;">`</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">html</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">&lt;button onclick=</span><span style="color:#89DDFF;">${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">handleClick</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&gt;Click Me&lt;/button&gt;</span><span style="color:#89DDFF;">`</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span></code></pre></div><p>The event listener will be added to the element/component and will be removed when the element/component is removed from the DOM.</p><p>We&#39;ll see more about event listeners and how to use them in the <a href="./event-handling.html">Event Handling</a> section.</p>',37),o=[l];function p(r,i,c,d,D,y){return e(),a("div",null,o)}const u=s(n,[["render",p]]);export{h as __pageData,u as default};
