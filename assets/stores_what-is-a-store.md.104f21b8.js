import{_ as e,c as t,o as a,a as o}from"./app.1f560a71.js";const f=JSON.parse('{"title":"What is a Store?","description":"","frontmatter":{},"headers":[],"relativePath":"stores/what-is-a-store.md"}'),s={name:"stores/what-is-a-store.md"},n=o('<h1 id="what-is-a-store" tabindex="-1">What is a Store? <a class="header-anchor" href="#what-is-a-store" aria-hidden="true">#</a></h1><p>As we&#39;ve seen in the <a href="./../components/state">State</a> and <a href="./../components/props">Props</a> section, Xeito allows you to easily manage the state of your components in a way that your template will react to changes in the state. Nonetheless, there are times when some part of your application state doesn&#39;t belong to a single component or inside of one.</p><p>For those cases, Xeito provides <em>stores</em>. A store is a simple way to create reactive data that can be shared across your application.</p><p>Some examples of when you might want to use a store:</p><ul><li>Sharing data between a service and a component.</li><li>Sharing data between components.</li><li>Keeping track of events that happen in your application.</li><li>Sharing reactive data between your xeito application and native js modules.</li></ul><p>Xeito provides three types of stores: <code>WriteStore</code>, <code>ReadStore</code> and <code>MixedStore</code>, each one with a different purpose.</p><p>We&#39;ll see each one of them in the following sections.</p>',7),i=[n];function r(c,p,h,d,l,_){return a(),t("div",null,i)}const u=e(s,[["render",r]]);export{f as __pageData,u as default};
