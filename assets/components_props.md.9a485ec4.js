import{_ as s,c as n,o as a,a as e}from"./app.ab17255f.js";const d=JSON.parse('{"title":"Component props","description":"","frontmatter":{},"headers":[{"level":2,"title":"Passing data to components","slug":"passing-data-to-components","link":"#passing-data-to-components","children":[]},{"level":2,"title":"The @Prop() decorator","slug":"the-prop-decorator","link":"#the-prop-decorator","children":[]},{"level":2,"title":"Reacting to Prop changes","slug":"reacting-to-prop-changes","link":"#reacting-to-prop-changes","children":[]},{"level":2,"title":"Imperative attribute access","slug":"imperative-attribute-access","link":"#imperative-attribute-access","children":[]}],"relativePath":"components/props.md"}'),o={name:"components/props.md"},p=e(`<h1 id="component-props" tabindex="-1">Component props <a class="header-anchor" href="#component-props" aria-hidden="true">#</a></h1><h2 id="passing-data-to-components" tabindex="-1">Passing data to components <a class="header-anchor" href="#passing-data-to-components" aria-hidden="true">#</a></h2><p>When composing multiple components together, it&#39;s often useful to pass data from one component to another. This is done by passing properties and attributes to the component in the html template.</p><p>As we&#39;ve seen in the <a href="./../essentials/template-syntax.html">Template Syntax</a> section, attributes and properties are automatically assigned, but they behave differently, while attributes can only be strings, you can pass any type of value to a property.</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">// Assigning an attribute</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">my-component</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">myAttribute</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">\${this.value}</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">my-component</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">// Assigning a property</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">my-component</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">.myProperty</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">\${this.value}</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">my-component</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="the-prop-decorator" tabindex="-1">The <code>@Prop()</code> decorator <a class="header-anchor" href="#the-prop-decorator" aria-hidden="true">#</a></h2><p>To be able to receive these properties and attributes in the component, we need to declare a class property with the <code>@Prop()</code> decorator. The name of the decorated class property will be the name of the property or attribute that&#39;s being listened to.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// my-component.ts</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Prop</span><span style="color:#A6ACCD;">() </span><span style="color:#FFCB6B;">currentCount</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">html</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;div&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">      &lt;h1&gt;Counter&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">      &lt;p&gt;Count: </span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">currentCount</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&lt;/p&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>The properties decorated with the <code>@Prop()</code> decorator will automatically trigger a re-render when they are changed by the parent component.</p><h2 id="reacting-to-prop-changes" tabindex="-1">Reacting to Prop changes <a class="header-anchor" href="#reacting-to-prop-changes" aria-hidden="true">#</a></h2><p>Sometimes you might need to execute custom code whenever a property is updated. For those cases Xeito provides a way to receive all the prop updates in your class with the <code>onPropChange()</code> method.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// my-component.ts</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Prop</span><span style="color:#A6ACCD;">() </span><span style="color:#FFCB6B;">currentCount</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">onPropChange</span><span style="color:#A6ACCD;">(change: PropChange) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">change</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">currentCount</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Old value: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">change</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">oldValue</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">New value: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">change</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">newValue</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>The <code>onPropChange()</code> method receives a <code>PropChange</code> object with the following properties:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PropChange</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">// The name of the prop that changed</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">oldValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// The old value of the property before the change</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">newValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// The new value of the property after the change</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="imperative-attribute-access" tabindex="-1">Imperative attribute access <a class="header-anchor" href="#imperative-attribute-access" aria-hidden="true">#</a></h2><p>Since Xeito Components are built by extending HTMLElement, you can access the attributes of the component in your methods imperatively without the need of the <code>@Prop()</code> decorator (although it&#39;s recommended to use the <code>@Prop()</code> decorator for consistency).</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// my-component.ts</span></span>
<span class="line"><span style="color:#82AAFF;">myMethod</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">currentCount</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">getAttribute</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">currentCount</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Note on reactivity</p><p>Even if you can access the attributes with the <code>getAttribute()</code> method, if you don&#39;t use the <code>@Prop()</code> decorator, the property won&#39;t be reactive. This means that if you change the attribute value, the property won&#39;t be updated and the component won&#39;t be re-rendered.</p></div>`,18),t=[p];function l(c,r,i,y,F,D){return a(),n("div",null,t)}const C=s(o,[["render",l]]);export{d as __pageData,C as default};
